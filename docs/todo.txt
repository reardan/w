current:
	x64
		syscall x64
		move machine code gen to codegen.w


	type...
		add fields to existing type table
			compiler.compile -> grammar.program -> 
		create type.fields for globals declared
		use the type.fields: for what?
			meta
				name
				size
			imported lookups
				e.g.
				import lib
				lib.println("hiya!")
		test on a sample type
		use type.w as it's own type
		use type.w as the basis for other types
		change import so it doesn't import globals
			> import type
				this will conflict with a lot of names
				> import type as language_type
				or only import in relevant files?
				> private import type
			type.size


	pointer...
		working:
			int*
			char[0]
		not working:
			int[]
			char* + 2
		problem:
			types are misaligned
				promote() char = 1, int = 2
				type_name() char = 2, int = 1
				constant = 3, no promotion (and it's re-used in expression())
			these all need to be fixed in the grammar
		another problem:
			function pointers
				currently only in testing.w to call the test function


	debugging advanced (dependant on pointers):
		sys_signal
			segv handler
			stack parser

		virtual memory
			print virtual memory locations


	external library calls...
		assembler/disassembler library


	c_import...
		grammar parser
		program parser


major bugs:
	int*[]
	*(char*)
	struct*
	&
	int* = int?

	function pointers...
		local variable calls work
		passing as arguments doesn't work
			need a better typing system to handle this


most important:
	type
	new
	symbol
	dict
	range
	repl
	debugger or emit info
	utf8 string


mvp features
	types
	parse c headers
		build structs
		enum values
	class instantiation via new
	debugging info
		lines accessible via gdb
		frames accessible via gdb


features:
	generators
	iterators
	for in range() generator
	cli argument parsing
	debugger
		asm
		disasm
		server
			websocket
		commands
			step
			next
			continue
			return
			breakpoint
			memory
			inspect

	stream class
	file class
	template strings
	int80 -> sysenter
	x64
	windows
	make
	git
	editor
	mocking
	variable arguments
	default values
	inline asm (functions?)
	refactor
		rename
		extract
		break
		combine
	template
	dynamic typing
		var
	net
		udp
			sendto
			recvfrom
	type <=> json
	type <=> protobuf
	global default values


test:
	&
	*
	!
	[] for int* / other
	char* indirection

statment:
	new
	for
	in
	range
	yield
	and
	or
	not

data structures:
	list
	dict
	string
	matrix

types:
	float
	const modifier
	*
	dynamic

