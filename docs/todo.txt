current:
	clean up directory structure...
		import directory.*...
			delete:
				codegen
				grammar

			edge case:
				directory structure:
					grammar/
					grammar.w
				code:
					import grammar
					import grammar.*
				behavior?
					1) use grammar.w
					2) use grammar/
					3) raise error
					I think I like behavior #1 the best as the most specific
					file is chosen.  It would be confusing to the user if the
					grammar subdirectory was used instead of grammar.w like
					they were expecting.  At the same time, grammar.file links
					should still work as expected: breaking the path up.
				

		fix makefile structure...
			split into sub makefiles
			fix any build/import issues

	pointer...
		working:
			int*
			char[0]
		not working:
			int[]
			char* + 2
		problem:
			types are misaligned
				promote() char = 1, int = 2
				type_name() char = 2, int = 1
				constant = 3, no promotion (and it's re-used in expression())
			these all need to be fixed in the grammar
		another problem:
			function pointers
				currently only in testing.w to call the test function

	type...
		add fields to existing type table
			compiler.compile -> grammar.program -> 
		create type.fields for globals declared
		use the type.fields: for what?
			meta
				name
				size
			imported lookups
				e.g.
				import lib
				lib.println("hiya!")
		test on a sample type
		use type.w as it's own type
		use type.w as the basis for other types
		change import so it doesn't import globals
			> import type
				this will conflict with a lot of names
				> import type as language_type
				or only import in relevant files?
				> private import type
			type.size

	hash map...
		based on c programming language...
		also research other types...

	string data type...

	web debugger...
		file tree explorer...
		search...
		code editor...
		binary analyzer...
		task runner...
			shell execute syscall...
			fork...
		debugger information...
		debug in existing debugger...
		parse tree analyzer...
		w debugger...


	struct
		partial int type e.g. int16
		struct pointers
		struct arrays
		struct of struct
		linked list via struct


	debugging advanced (dependant on pointers):
		sys_signal
			segv handler
			stack parser

		virtual memory
			print virtual memory locations


	external library calls...
		assembler/disassembler library...
		threading library...


	c_import...
		lexer...
		parser...


	code generation...
		remaining x64...
			lib_test...
			self compiling...


		web assembly...
			hello world...
			editor...
				fonts...
				webgl...
				renderer...
				mouse...
				keyboard...
			self compiling...
				advanced assembly...

	merge symbol_table + type_table
		base on hash_map

major bugs:
	int*[]
	*(char*)
	struct*
	&
	int* = int?

	function pointers...
		local variable calls work
		passing as arguments doesn't work
			need a better typing system to handle this


most important:
	type
	new
	symbol
	dict
	range
	repl
	debugger or emit info
	utf8 string


mvp features
	types
	parse c headers
		build structs
		enum values
	class instantiation via new
	debugging info
		lines accessible via gdb
		frames accessible via gdb


features:
	generators
	iterators
	for in range() generator
	cli argument parsing
	debugger
		asm
		disasm
		server
			websocket
		commands
			step
			next
			continue
			return
			breakpoint
			memory
			inspect

	stream class
	file class
	template strings
	int80 -> sysenter
	x64
	windows
	make
	git
	editor
	mocking
	variable arguments
	default values
	inline asm (functions?)
	refactor
		rename
		extract
		break
		combine
	template
	dynamic typing
		var
	net
		udp
			sendto
			recvfrom
	type <=> json
	type <=> protobuf
	global default values


test:
	&
	*
	!
	[] for int* / other
	char* indirection

statment:
	new
	for
	in
	range
	yield
	and
	or
	not

data structures:
	list
	dict
	string
	matrix

types:
	float
	const modifier
	*
	dynamic

