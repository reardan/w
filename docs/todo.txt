current:
	type table...
		based on list...done
		type lookup...done
		init...done
		use in grammar...done
		use in import...done
			NOTE: assert.assert() not allowed for now
			should this be the constructor?
	struct...
		type table arguments...done
		type table field lookup...done
		type table >3 arguments...done
		add fields to grammar...untested
		dot operator...
			postfix_()
				migrate to recursive?
			problem with types being passed through
			need to get the actual type
			then we can access via type_get_arg(token) to get the index
			then use this index*4 in the addition on line 157
		larger stack space required...
			inside statement()
				same problem with types being passed through
				need to get the actual type
				then we can access type.num_args
				
	type...
	new...


done:
	symbol table...complete!
	testing...complete!
	list...complete!


major bugs:
	int*[]
	*(char*)

	function pointers...
		local variable calls work
		passing as arguments doesn't work
			need a better typing system to handle this


most important:
	type
	new
	dict
	range
	repl
	debugger or symbols


features:
	types
	generators
	iterators
	for in range()
	class instantiation
	subdirectory import
	cli argument parsing
	debugging info
	debugger
		asm
		disasm
	stream class
	file class
	x64
	net
	windows
	make
	git
	editor
	mocking
	variable arguments
	default values
	template
	template strings


test:
	&
	*
	!
	[] for int* / other
	char* indirection

statment:
	new
	for
	in
	range
	yield
	and
	or
	not

data structures:
	list
	dict
	string
	matrix

types:
	float
	const modifier
	*
	dynamic

